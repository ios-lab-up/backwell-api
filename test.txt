Ya que tenemos ambos servicios corriendo en el mismo docker y siendo capaces de consumirse entre si, vamos a continuar con algunas correcciones al código para mejorar los formatos, y respuestas.

En base al siguiente código modificar lo siguiente:

Django
Modifica los archivos para que al leer e importar los datos del excel se hagan las siguientes consideraciones:
Debe de haber un solo curso por numero de clase a menos que cambie la info y se debe acabar juntando, los días y horas en una nueva tabla llamada schedules.
Cada materia debe de tener una llave foránea a su schedule el cual incluye los días que se da esa materia y la hora para que se pueda extraer solo el horario de ese numero de clase mas fácil y que se maneje solo como: Lunes 14:00 - 15:30 Miércoles 14:00 - 15:30 Viernes 13:30 - 15:00
de igual manera en cada horario se incluye el salon, en caso de ser nulo poner Sin Asignar como un nuevo salon pero si la modalidad es en linea poner En Linea como un nuevo salon
e incluir el profesor que imparte ese horario
Hacer validaciones para poder hacer este merge como
si tienen el mismo numero de clase, que no se repita la información, pero si cambie aunque sea el profesor por ejemplo crear otra clase con ese numero pero con el diferente profesor

En la tabla materias se esta insertando materias pero cada que hay un código nuevo mas no cada que hay un nombre nuevo, en materias se debe de guardar todos los datos por nombre de materia no por código ya que el código se puede repetir para otra materia porque es el código de la escuela o facultad y la materia es el valor importante a registrar

En general los ajustes es para que en vez de hacer un registro por hora de clase en la bd prácticamente, ya se fusionan todas las horas de una clase para mostrar un curso con la información completa  y su horario con las diferentes horas de clase que tiene en la semana que puede ser una dos o tres por ejemplo

models.py
from django.db import models

class Materia(models.Model):
    codigo = models.CharField(max_length=50)  # Campo 'Materia' en el Excel
    nombre = models.CharField(max_length=255)  # Campo 'Clase' en el Excel
    no_de_catalogo = models.CharField(max_length=50)  # Campo 'No de catálogo'

    def __str__(self):
        return f"{self.nombre} ({self.codigo})"

class Salon(models.Model):
    nombre = models.CharField(max_length=50)
    capacidad = models.IntegerField(null=True, blank=True)

    def __str__(self):
        return self.nombre

class Profesor(models.Model):
    nombre = models.CharField(max_length=255)

    def __str__(self):
        return self.nombre

class Curso(models.Model):
    id_del_curso = models.IntegerField(verbose_name='Id del Curso')
    ciclo = models.IntegerField(verbose_name='Ciclo')
    sesion = models.CharField(max_length=50, verbose_name='Sesión')
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE, verbose_name='Materia')
    mat_comb = models.IntegerField(verbose_name='Mat. Comb.')
    clases_comb = models.CharField(max_length=255, verbose_name='Clases Comb.')
    capacidad_inscripcion_combinacion = models.IntegerField(verbose_name='Capacidad Inscripción Combinación')
    no_de_catalogo = models.CharField(max_length=50, verbose_name='No de catálogo')
    clase = models.CharField(max_length=100, verbose_name='Clase')
    no_de_clase = models.IntegerField(verbose_name='No de clase')
    capacidad_inscripcion = models.IntegerField(verbose_name='Capacidad Inscripción')
    total_inscripciones = models.IntegerField(verbose_name='Total inscripciones')
    total_inscripciones_materia_combinada = models.IntegerField(verbose_name='Total de inscripciones materia combinada')
    fecha_inicial = models.DateField(verbose_name='Fecha inicial')
    fecha_final = models.DateField(verbose_name='Fecha final')
    salon = models.ForeignKey(Salon, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Salón')
    capacidad_del_salon = models.IntegerField(verbose_name='Capacidad del salón')
    hora_inicio = models.TimeField(verbose_name='Hora inicio')
    hora_fin = models.TimeField(verbose_name='Hora fin')
    profesor = models.ForeignKey(Profesor, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Profesor')
    lunes = models.BooleanField(default=False, verbose_name='Lunes')
    martes = models.BooleanField(default=False, verbose_name='Martes')
    miercoles = models.BooleanField(default=False, verbose_name='Miércoles')
    jueves = models.BooleanField(default=False, verbose_name='Jueves')
    viernes = models.BooleanField(default=False, verbose_name='Viernes')
    sabado = models.BooleanField(default=False, verbose_name='Sábado')
    domingo = models.BooleanField(default=False, verbose_name='Domingo')
    bloque_optativo = models.CharField(max_length=50, verbose_name='Bloque optativo')
    idioma_impartido = models.CharField(max_length=50, blank=True, null=True, verbose_name='Idioma en que se imparte la materia')
    modalidad_clase = models.CharField(max_length=50, blank=True, null=True, verbose_name='Modalidad de la clase')

    def __str__(self):
        return f"Curso {self.id_del_curso} - {self.materia.nombre}"

import_excel.py
import pandas as pd
from django.core.management.base import BaseCommand
from app.models import Materia, Profesor, Salon, Curso
from django.utils import timezone
from datetime import datetime
import os
from django.conf import settings
import logging
logger = logging.getLogger('app')

class Command(BaseCommand):
    help = 'Importa datos desde un archivo Excel a la base de datos'

    def handle(self, *args, **kwargs):
        try:
            excel_file_path = os.path.join(settings.BASE_DIR, 'Schedule.xlsx')
            self.stdout.write(f"Buscando el archivo Excel en: {excel_file_path}")
            try:
                df = pd.read_excel(excel_file_path)
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"Error al leer el archivo Excel: {e}"))
                return
            # Procesa cada fila del DataFrame
            for index, row in df.iterrows():
                # Crear o obtener el profesor
                profesor, _ = Profesor.objects.get_or_create(nombre=row['Profesor'])

                # Crear o obtener el salón
                salon, _ = Salon.objects.get_or_create(nombre=row['Salón'], defaults={'capacidad': row['Capacidad del salón']})

                # Crear o obtener la materia
                materia_obj, _ = Materia.objects.get_or_create(
                    codigo=row['Materia'],
                    defaults={
                        'nombre': row['Clase'],
                        'no_de_catalogo': row['No de catálogo']
                    }
                )

                # Convertir campos de fecha y hora
                fecha_inicial = datetime.strptime(str(row['Fecha inicial']), '%Y-%m-%d')
                fecha_final = datetime.strptime(str(row['Fecha final']), '%Y-%m-%d')
                hora_inicio = datetime.strptime(str(row['Hora inicio']), '%I:%M %p').time()
                hora_fin = datetime.strptime(str(row['Hora fin']), '%I:%M %p').time()

                # Convertir campos de días de la semana
                dias = {
                    'lunes': row['Lunes'] == 'X',
                    'martes': row['Martes'] == 'X',
                    'miercoles': row['Miércoles'] == 'X',
                    'jueves': row['Jueves'] == 'X',
                    'viernes': row['Viernes'] == 'X',
                    'sabado': row['Sábado'] == 'X',
                    'domingo': False  # Siempre vacío
                }

                # Crear el curso
                Curso.objects.create(
                    id_del_curso=row['Id del Curso'],
                    ciclo=row['Ciclo'],
                    sesion=row['Sesión'],
                    materia=materia_obj,
                    mat_comb=row['Mat. Comb.'],
                    clases_comb=row['Clases Comb.'],
                    capacidad_inscripcion_combinacion=row['Capacidad\nInscripción\nCombinación'],
                    no_de_catalogo=row['No de catálogo'],
                    clase=row['Clase'],
                    no_de_clase=row['No de clase'],
                    capacidad_inscripcion=row['Capacidad Inscripción'],
                    total_inscripciones=row['Total  inscripciones'],
                    total_inscripciones_materia_combinada=row['Total de inscripciones materia combinada'],
                    fecha_inicial=fecha_inicial,
                    fecha_final=fecha_final,
                    salon=salon,
                    capacidad_del_salon=salon.capacidad,
                    hora_inicio=hora_inicio,
                    hora_fin=hora_fin,
                    profesor=profesor,
                    bloque_optativo=row['Bloque optativo'],
                    modalidad_clase=row['Modalidad de la clase'],
                    **dias
                )

            self.stdout.write(self.style.SUCCESS('Datos importados exitosamente'))
        except Exception as e:
            logger.error(f"Error al importar datos: {e}")
            self.stdout.write(self.style.ERROR(f"Error al importar datos: {e}"))
serializers.py
from rest_framework import serializers
from .models import Curso, Materia, Profesor, Salon

        
class MateriaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Materia
        fields = '__all__'

class ProfesorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Profesor
        fields = '__all__'

class SalonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Salon
        fields = '__all__'

class CursoSerializer(serializers.ModelSerializer):
    materia = MateriaSerializer()
    profesor = ProfesorSerializer()
    salon = SalonSerializer()

    class Meta:
        model = Curso
        fields = '__all__'

views.py
from rest_framework import viewsets
from .models import Curso, Materia, Profesor, Salon
from .serializers import CursoSerializer, MateriaSerializer, ProfesorSerializer, SalonSerializer
from django_filters.rest_framework import DjangoFilterBackend
from .filters import CursoFilter

class CursoViewSet(viewsets.ModelViewSet):
    queryset = Curso.objects.all()
    serializer_class = CursoSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_class = CursoFilter

class MateriaViewSet(viewsets.ModelViewSet):
    queryset = Materia.objects.all()
    serializer_class = MateriaSerializer

class ProfesorViewSet(viewsets.ModelViewSet):
    queryset = Profesor.objects.all()
    serializer_class = ProfesorSerializer

class SalonViewSet(viewsets.ModelViewSet):
    queryset = Salon.objects.all()
    serializer_class = SalonSerializer

filters.py
import django_filters
from .models import Curso

class CursoFilter(django_filters.FilterSet):
    materia__codigo = django_filters.CharFilter(field_name='materia__codigo', lookup_expr='exact')
    profesor__nombre = django_filters.CharFilter(field_name='profesor__nombre', lookup_expr='icontains')
    salon__nombre = django_filters.CharFilter(field_name='salon__nombre', lookup_expr='exact')
    ciclo = django_filters.NumberFilter(field_name='ciclo', lookup_expr='exact')
    sesion = django_filters.CharFilter(field_name='sesion', lookup_expr='exact')

    class Meta:
        model = Curso
        fields = ['materia__codigo', 'profesor__nombre', 'salon__nombre', 'ciclo', 'sesion']

